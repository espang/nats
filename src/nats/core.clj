(ns nats.core
  (:require [aleph.tcp :as tcp]
            [clojure.core.async :as async]
            [manifold.stream :as s]))

(def space (byte 0x20))

(defn incoming-message [msg]
  (let [[command other] (split-with (partial not= space) msg)]
    {:command (String. (byte-array (map byte command)))
     :payload (String. (byte-array (map byte other)))}))

(defn receiver [client]
  (async/go-loop []
    (println (slurp @(s/take! @client)))
    (recur)))

(defn connect-to-nats [host port]
  (let [client (tcp/client {:host "localhost"
                            :port 4222})]
    (receiver client)
    client))

(comment
  (def client
    (connect-to-nats "localhost" 4222))
  (ping client))

(defn ping [client]
  @(s/put! @client "PING\r\n"))

(defn pong [client]
  @(s/put! @client "PONG\r\n"))

(defn connect [client connect-msg]
  @(s/put! @client (str "CONNECT " connect-msg "\r\n")))

(defn pub
  ([client subject payload]
   @(s/put! @client (str "PUB "
                         subject
                         " "
                         (count payload)
                         "\r\n"
                         payload
                         "\r\n")))
  ([client subject reply-to payload]
   @(s/put! @client (str "PUB "
                         subject
                         " "
                         reply-to
                         " "
                         (count payload)
                         "\r\n"
                         payload
                         "\r\n"))))

; sid - connection-unique sub id generated by the client
(defn sub
  ([client subject sid]
   @(s/put! @client (str "SUB "
                         subject
                         " "
                         sid
                         "\rn")))
  ([client subject group sid]
   @(s/put! @client (str "SUB "
                         subject
                         " "
                         group
                         " "
                         sid
                         "\rn"))))

(defn unsub
  ([client sid]
   @(s/put! @client (str "UNSUB " sid "\r\n")))
  ([client sid max-msgs]
   @(s/put! @client (str "UNSUB " sid " " max-msgs "\r\n"))))



